# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'webgoat-docker'

stages:
 - stage: SAST
   jobs:
    - job: Dependency_check
      steps:
      - task: WhiteSource Bolt@20
        inputs:
          advance: true
      - task: dependency-check-build-task@6
        displayName: OWASP Dependency Check
        condition: always()
        inputs:
          projectName: 'WebGoat'
          scanPath: '.'
          format: 'JUNIT'
      - task: PublishTestResults@2
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '/home/vsts/work/1/TestResults/dependency-check/dependency-check-junit.xml'

    - job: SonarCloud_SAST
      steps:
      - checkout: self
        fetchDepth: 0
      - task: DotNetCoreCLI@2
        displayName: DotNetCoreCLI Restore
        inputs:
          command: 'restore'
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'sonarcloud'
          organization: 'jmservera-ado'
          projectKey: 'jmservera_WebGoat.Net'
          projectName: 'WebGoat.Net'
          scannerMode: 'MSBuild'
          extraProperties: |
            sonar.exclusions=**/obj/**,**/*.dll,**/Migrations/*
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\**\*.trx
            sonar.qualitygate.wait=true

      - task: DotNetCoreCLI@2
        displayName: DotNetCoreCLI Build
        inputs:
          command: 'build'

      - task: SonarCloudAnalyze@1

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

 - stage: DAST
   # this removes the implicit dependency with the previous stage
   # see: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/stages?view=azure-devops&tabs=yaml#specify-dependencies
   dependsOn: []
   jobs:
    - job: build_and_run_image
      displayName: Build and run docker image
      steps:
        - task: DockerInstaller@0
          inputs:
            dockerVersion: '17.09.0-ce'

        - task: Docker@2
          displayName: build dockerfile
          inputs:
            repository: $(imageName)
            command: 'build'
            Dockerfile: '**/Dockerfile'
            
        - bash: docker run -p 80:80 -d $(imageName):$(Build.BuildId)
          displayName: Run WebGoat website
        - task: owaspzap@1
          inputs:
            aggressivemode: true

        - bash: |
            sudo npm install -g handlebars-cmd

            cat <<EOF > owaspzap/nunit-template.hbs

            <test-run
                id="2"
                name="Owasp test"
                start-time="{{@generated}}">
                {{#each site}}<test-suite
                    id="{{@index}}"
                    type="Assembly"
                    name="{{[@name]}}"
                    result="Failed"
                    failed="{{alerts.length}}">
                    <attachments>
                        <attachment>
                            <filePath>$BUILD_SOURCESDIRECTORY/owaspzap/report.html</filePath>
                        </attachment>
                    </attachments>
                    {{#each alerts}}<test-case
                        id="{{@index}}"
                        name="{{alert}}"
                        result="Failed"
                        fullname="{{alert}}"
                        time="1">
                        <failure>
                            <message>
                                <![CDATA[{{{desc}}}]]>
                            </message>
                            <stack-trace>
                                <![CDATA[
            Solution:
            {{{solution}}}

            Reference:
            {{{reference}}}

            instances:{{#each instances}}
            * {{uri}}
                - {{method}}
                {{#if evidence}}- {{{evidence}}}{{/if}}
                                {{/each}}]]>
                            </stack-trace>
                        </failure>
                    </test-case>
                    {{/each}}
                </test-suite>
                {{/each}}
            </test-run>
            EOF
          displayName: 'owasp nunit template'
          condition: always()
        - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
          displayName: 'generate nunit type file'
          condition: always()

        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            testResultsFiles: 'owaspzap/test-results.xml'
          condition: always()

 - stage: ShipIt
   dependsOn: [SAST,DAST]
   condition: succeeded()
   jobs:
     - job: deploy_to_Azure
       displayName: Deploy to Azure
       steps:
         - bash: echo "Publishing to Azure..."
     - job: deploy_to_OnPrem
       displayName: Deploy to On Premises
       steps:
         - bash: echo "It works on my computerâ„¢" 